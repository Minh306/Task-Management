//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TaskManagement.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SEP23Team7Entities : DbContext
    {
        public SEP23Team7Entities()
            : base("name=SEP23Team7Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<MissionInforLeader> MissionInforLeaders { get; set; }
        public virtual DbSet<MissionMember> MissionMembers { get; set; }
        public virtual DbSet<Mission> Missions { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<UserOfMission> UserOfMissions { get; set; }
        public virtual DbSet<UsersOfDepartment> UsersOfDepartments { get; set; }
        public virtual DbSet<FileAttachment> FileAttachments { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<WorkOfFile> WorkOfFiles { get; set; }
        public virtual DbSet<UserTask> UserTasks { get; set; }
        public virtual DbSet<TaskManage> TaskManages { get; set; }
        public virtual DbSet<TaskRelationship> TaskRelationships { get; set; }
        public virtual DbSet<FileUpload> FileUploads { get; set; }
        public virtual DbSet<CommentTask> CommentTasks { get; set; }
        public virtual DbSet<Notify> Notifies { get; set; }
        public virtual DbSet<UserNotify> UserNotifies { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<SP_GetAllChild_Task_By_ParentId_Result> SP_GetAllChild_Task_By_ParentId(Nullable<int> parentId)
        {
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllChild_Task_By_ParentId_Result>("SP_GetAllChild_Task_By_ParentId", parentIdParameter);
        }
    
        public virtual ObjectResult<SP_GetCommentByTaskId_Result> SP_GetCommentByTaskId(Nullable<int> taskId)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCommentByTaskId_Result>("SP_GetCommentByTaskId", taskIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_GetLastCommentId_By_TaskId(Nullable<int> taskId)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_GetLastCommentId_By_TaskId", taskIdParameter);
        }
    
        public virtual int SP_RemoveComment_By_Id(Nullable<int> commentId)
        {
            var commentIdParameter = commentId.HasValue ?
                new ObjectParameter("commentId", commentId) :
                new ObjectParameter("commentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_RemoveComment_By_Id", commentIdParameter);
        }
    
        public virtual ObjectResult<SP_GetCommentByTaskId1_Result> SP_GetCommentByTaskId1(Nullable<int> taskId)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCommentByTaskId1_Result>("SP_GetCommentByTaskId1", taskIdParameter);
        }
    
        public virtual int SP_GetInfo_To_Send_Notifier(Nullable<int> taskId, string assignFrom, string assignTo)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            var assignFromParameter = assignFrom != null ?
                new ObjectParameter("assignFrom", assignFrom) :
                new ObjectParameter("assignFrom", typeof(string));
    
            var assignToParameter = assignTo != null ?
                new ObjectParameter("assignTo", assignTo) :
                new ObjectParameter("assignTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetInfo_To_Send_Notifier", taskIdParameter, assignFromParameter, assignToParameter);
        }
    
        public virtual int SP_GetInfo_To_Send_Notify(Nullable<int> taskId, string assignFrom, string assignTo)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            var assignFromParameter = assignFrom != null ?
                new ObjectParameter("assignFrom", assignFrom) :
                new ObjectParameter("assignFrom", typeof(string));
    
            var assignToParameter = assignTo != null ?
                new ObjectParameter("assignTo", assignTo) :
                new ObjectParameter("assignTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetInfo_To_Send_Notify", taskIdParameter, assignFromParameter, assignToParameter);
        }
    
        public virtual int SP_GetData_To_Send_Notify(Nullable<int> taskId, string assignFrom, string assignTo)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            var assignFromParameter = assignFrom != null ?
                new ObjectParameter("assignFrom", assignFrom) :
                new ObjectParameter("assignFrom", typeof(string));
    
            var assignToParameter = assignTo != null ?
                new ObjectParameter("assignTo", assignTo) :
                new ObjectParameter("assignTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetData_To_Send_Notify", taskIdParameter, assignFromParameter, assignToParameter);
        }
    
        public virtual ObjectResult<SP_GetData_To_Send_Notifier_Result> SP_GetData_To_Send_Notifier(Nullable<int> taskId, string assignFrom, string assignTo)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            var assignFromParameter = assignFrom != null ?
                new ObjectParameter("assignFrom", assignFrom) :
                new ObjectParameter("assignFrom", typeof(string));
    
            var assignToParameter = assignTo != null ?
                new ObjectParameter("assignTo", assignTo) :
                new ObjectParameter("assignTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetData_To_Send_Notifier_Result>("SP_GetData_To_Send_Notifier", taskIdParameter, assignFromParameter, assignToParameter);
        }
    
        public virtual ObjectResult<GetListNotify_By_User_Result> GetListNotify_By_User(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListNotify_By_User_Result>("GetListNotify_By_User", userIdParameter);
        }
    
        public virtual ObjectResult<GetListNotify_By_User1_Result> GetListNotify_By_User1(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListNotify_By_User1_Result>("GetListNotify_By_User1", userIdParameter);
        }
    }
}
